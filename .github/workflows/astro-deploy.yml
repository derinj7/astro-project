name: Astronomer CI - Deploy code

on:
  push:
    branches: [ main ]
  repository_dispatch:
    types: [ deploy_request ]
  workflow_dispatch: {}

env:
  ASTRO_API_TOKEN: ${{ secrets.ASTRO_API_TOKEN }}

concurrency:
  group: astro-deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # -------- PUSH / MANUAL: choose by paths --------
  deploy-from-push:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (initial, no submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.SUBMODULES_PAT }}

      # Decide what changed BEFORE checking out submodules
      - name: Filter changed paths
        id: changes
        uses: dorny/paths-filter@v3
        with:
          base: HEAD~1
          list-files: json
          filters: |
            dags:
              - 'dags/**'
            other:
              - '**'
              - '!dags/**'
              - '!.gitmodules'

      # Debug: Show what changed
      - name: Debug - Show detected changes
        run: |
          echo "=== PATHS FILTER RESULTS ==="
          echo "DAGs changed: ${{ steps.changes.outputs.dags }}"
          echo "Other files changed: ${{ steps.changes.outputs.other }}"
          echo "All changes detected: ${{ steps.changes.outputs.changes }}"
          echo ""
          echo "=== FILES DETECTED BY FILTER ==="
          echo "DAG files: ${{ steps.changes.outputs.dags_files }}"
          echo "Other files: ${{ steps.changes.outputs.other_files }}"
          echo ""
          echo "=== GIT DIFF ANALYSIS ==="
          echo "Files that changed in this push:"
          git diff --name-only HEAD~1 HEAD || echo "Could not get diff"
          echo ""
          echo "=== DEPLOYMENT DECISION ==="
          if [[ "${{ steps.changes.outputs.dags }}" == "true" && "${{ steps.changes.outputs.other }}" == "false" ]]; then
            echo "DECISION: DAG-only deploy (dags=true, other=false)"
          elif [[ "${{ steps.changes.outputs.other }}" == "true" ]]; then
            echo "DECISION: Full image deploy (other=true)"
          else
            echo "DECISION: No deployment (dags=false, other=false)"
          fi

      # Only-dags -> DAG deploy (checkout submodules first)
      - name: Checkout submodules for DAG deploy
        if: steps.changes.outputs.dags == 'true' && steps.changes.outputs.other == 'false'
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.SUBMODULES_PAT }}

      - name: Deploy DAGs only
        if: steps.changes.outputs.dags == 'true' && steps.changes.outputs.other == 'false'
        uses: astronomer/deploy-action@v0.10.1
        with:
          deployment-id: ${{ vars.DEPLOYMENT_ID }}
          deploy-type: dags-only

      # Anything else -> image deploy (checkout submodules first)
      - name: Checkout submodules for image deploy
        if: steps.changes.outputs.other == 'true'
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.SUBMODULES_PAT }}
        
      - name: Deploy image and DAGs
        if: steps.changes.outputs.other == 'true'
        uses: astronomer/deploy-action@v0.10.1
        with:
          deployment-id: ${{ vars.DEPLOYMENT_ID }}
          deploy-type: image-and-dags

  # -------- DISPATCH (from team repos): always DAG-only --------
  deploy-from-dispatch:
    if: github.event_name == 'repository_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with submodules via PAT)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.SUBMODULES_PAT }}

      - name: Update submodules to latest
        run: |
          git submodule update --init --recursive --remote
          echo "Updated submodules to latest commits"

      - name: Deploy DAGs only (forced)
        uses: astronomer/deploy-action@v0.10.1
        with:
          deployment-id: ${{ vars.DEPLOYMENT_ID }}
          deploy-type: dags-only